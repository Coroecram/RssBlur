c
params
c
meta.meta["og:image"]
meta.meta
meta.image
meta = MetaInspector.new(url)
url
noko_page.css('img')
noko_page.css('img')['title']
noko_page.css('img').['title']
noko_page.css('img').attr('title')
noko_page.css('img')
c
page.url
page.feed
page = MetaInspector.new("motherjones.com")
MetaInspector.new("motherjones.com")
c
MetaInspector.new("http://addg")
MetaInspector.new("addg")
MetaInspector.methods
MetaInspector.new(url)
MetaInspector.new
MetaInspector
require 'metainspector'
require 'meta-inspector'
require 'metainspector'
require 'MetaInspector'
"http://asfafa" =~ URI::regexp
"http://asfafa" =~ URI::ABS_URI
"asfafa" =~ URI::ABS_URI
"www.asfafa" =~ URI::ABS_URI
"http://asfafa" =~ URI::ABS_URI
"http://www.#{url}" =~ URI::ABS_URI
"http://" =~ URI::regexp
"http://#{url}" =~ URI::regexp
"http://www.#{url}" =~ URI::regexp
"www.#{url}".valid_url
"www.#{url}"
"www.#{url}" =~ URI::ABS_URI
"www.#{url}" =~ URI::regexp
URI.parser
URI.parser("dsgsff")
URI.parse("dsgsff").parser
URI.parse("dsgsff").relative?
URI.parse(url).relative?
URI.parse(url).methods
URI.parse(url).valid?
URI.parse(url).valid/
URI.parse(url)
URI.pase(url)
<%= f.url_field url %>
<%= f.url_field :url %>
f
f.url_field
f
url =~ URI::regexp
url =~ URI::ABS_URI
url
c
current_article_keys
current_article_keys[1448558028]
current_article_keys
current_article_keys["1448558028"]
current_article_keys[1448558028]
current_articles.first["created_at"].to_i
current_articles.first
current_articles
page = params[:page].to_i
c
current_articles_ids
c
current_articles.first["id"]
current_articles
current)articles
current_articles_ids
c
current_article_keys
c
Article.find(55)
Artcle.find(55)
user_articles
q!
Article.all
user_articles[1].website.id
user_articles.select{ |ua| ua.website.id == 7 }
user_articles.select{ |ua| ua.website.id == 9 }
user_articles.select{ |ua| ua.website.id == 8 }
user_articles.select{ |ua| ua.website.id == 6 }
user_articles.select{ |ua| ua.website.id == 5 }
user_articles.select{ |ua| ua.website.id == 14 }
user_articles.select{ |ua| ua.website.id == params[:website_id].to_i }
params[:website_id]
user_articles.select{ |ua| ua.website.id == params[:website_id] }
user_articles.class
user_articles.each { |user_article| user_article.website.id == params[:website_id] }
user_articles.each { |user_article| user_article.website.id = params[:website_id] }
user_articles.select { |user_article| user_article.website.id = params[:website_id] }
user_articles.first.website
user_articles
user_articles.where
user_articles.each
user_articles.select(website.id = 1)
user_articles.select(website.id = 1
user_articles
user_Articles
c
q!
user_articles.first.website.id
user_articles.first.website
user_articles.first
q!
user_article_keys
user_articles_keys
user_articles
c
/\A#{URI::ABS_URI}\z/
/\A#{URI::ABS_URI}\z/)
!!(url =~/\A#{URI::ABS_URI}\z/)
!!(url =~/\AURI::ABS_URI\z/)
!!(url =~/\A URI::ABS_URI\z/)
!!(url =~/\A URI::ABS_URI\z/
!!(url =~ URI::ABS_URI)
url =~ URI::ABS_URI
URI::ABS_URI
!!URI.parse("dfddsddssvvfsf")
URI.parse("dfddsddssvvfsf")
URI.parse("dfdf")
URI.parse("")
!!URI.parse("http://")
!!URI.parse("http://"))
!!URI.parse(url)
url
q!
c
noko_page.text
c
noko_page.text
c
noko_page.text
c
noko_page.text
c
noko_page.text
c
noko_page.css('img')
noko_page.css
noko_page = Nokogiri::HTML(open(rss_entry.url))
Nokogiri::HTML(open(rss_entry.url)).methods
c
page_noko.css('img')
page_noko.css('img').first['src']
page_noko = Nokogiri::HTML(rss_entry.summary)
Nokogiri::HTML(open(rss_entry.url)).css('img').first['src']
Nokogiri::HTML(open(rss_entry.url)).css('img')['src']
page_noko.css('img').first['src']
rss_entry.url
page_noko.css('img').first
page_noko.css('img')
page_noko.image
page_noko = Nokogiri::HTML(open(rss_entry.url))
page_noko = Nokogiri::HTML(rss_entry.url)
rss_entry.url
rss_entry.summary
rss_rentry.summary
page_noko = Nokogiri::HTML(rss_entry)
page_noko = Nokogiri::HTML(rss_entry.summary)
c
page_noko.css('img').first['src']
page_noko = Nokogiri::HTML(rss_entry.summary)
c
next_article.class
page_noko.css('img').first['src']
page_noko.css('img').first
page_noko.css('img')
page_noko.css
page_noko.methods
page_noko.image
page_noko.text
page_noko = Nokogiri::HTML(rss_entry.summary)
Nokogiri
rss_entry.summary
rss_entry.methods
rss_entry
c
article_id
c
article_id
c
n
article_id
user_article
c
render json: @articles
JSON.parse(@articles)
@articles.to_json
@articles.first['id']
@articles.first[:id]
@articles.first
@articles.first.to_json.class
@articles.first.class
@articles.class
q!
c
@articles
c
next_article
next_article.to_json
next_article
c
next_article.to_json
next_article
q!
c
current_articles.select { |article| article["created_date"].to_i == created_date.to_i }.first
current_articles.select { |article| article["created_date"].to_i == created_date.to_i }.flatten
q!
c
next_article
c
next_article
s
title
created_date
next_article
s
c
next_article.to_json
next_article
n
a
a = puts "hey"
next_article[0] || puts "hey"
next_article
n
created_date.to_i
current_articles.map { |article| article["created_date"].to_i }
current_articles.map { |article| article["created_date"] }
current_articles.map(?:created_date)
current_articles.map
created_date.to_i
current_articles.select { |article| article["created_date"].to_i == created_date.to_i }
next_article
c
[][0]
[][0] = 1
[].first = 1
[].first
[][0]
[].empty?
c
next_article
c
next_article
next_Article

c
meta_summary
feedjira_summary
c
thumb_summary
feedjira_summary
meta_summary
c
meta_summary
c
meta_summary
c
thumb_summary
feedjira_summary
meta_summary
c
meta_summary
feedjira_summary
thumb_summary
c
rss.url
rss.entries
meta_feed.feed.entries
meta_feed.feed
meta_feed = MetaInspector.new("www.thenation.com")
meta_feed.content_type
meta_feed.url
meta_feed.feed
meta_feed = MetaInspector.new(params[:url])
rss = Feedjira::Feed.fetch_and_parse params[:url]
c
net
net = Net::HTTP.get(URI.parse(jira_entry.url))
Net::HTTP.get(URI.parse(jira_entry.url))
require 'net'
require 'net/http'
c
jira_entry.url
jira_entry.xpath("author")
thumblink.author
meta_page.meta
meta_page.author
jira_entry.author
c
cc
c
quit
q1
c
params.push(created_date)
params = [url, title, author, summary, image].map { |param| param.force_encoding('UTF-8') }
[url, title, author, summary, image, created_date.to_s].map { |param| param.force_encoding('UTF-8') }
[url, title, author, summary, image, created_date].map { |param| param.force_encoding('UTF-8') }
    end
      param.force_encoding('UTF-8')
[url, title, author, summary, image, created_date].map do |param|
[1,2,3].map(&:+3)
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8')
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8'
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8')
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8')))
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8'))
[url, title, author, summary, image, created_date].force_encoding('UTF-8')
[url, title, author, summary, image, created_date]
c
q
c
"Riusuke Fukahori\xE2\x80\x99s".force_encoding('UTF-8')
Base64.decode64("Riusuke Fukahori\xE2\x80\x99s")
Base64.encode64("Riusuke Fukahori\xE2\x80\x99s")
Base64.decode64("Riusuke Fukahori\xE2\x80\x99s")
"Riusuke Fukahori\xE2\x80\x99s"
Riusuke Fukahori\xE2\x80\x99s
c
meta_page.meta.to_h["og:image"]
c
meta_page.meta.to_h["og:description"]
c
rss.entries[0]
idx
c
rss.entries.first
c
thumblink.methods
entry.published
entry.methods
entry = rss.entries.first
meta_page.meta
meta_page.methods
meta_page.author
thumblink.author
thumblink
thumblink.description
thumblink.images.first.src
thumblink.images.first
thumbLink.images
thumbLink.images.first
thumblink = LinkThumbnailer.generate(rss.entries.first.url, image_limit: 1, http_open_timeout: 2, image_stats: false)
thumblink = LinkThumbnailer.generate(entries.first.url, image_limit: 1, http_open_timeout: 2, image_stats: false)
thumb
rss.entries.first.summary
rss.entries.first.description
rss.entries.first.title
rss.entries.first.url
meta_page.meta.to_h["article:published_time"]
meta_page.meta.to_h["og:description"]
meta_page.meta.to_h[og:description]
meta_page.meta.to_h[:og:description]
meta_page.meta.to_h
meta_page.description
meta_page.summary
meta_page.sumamry
meta_page.meta.to_h["og:image"]
meta_page.meta.to_h["og:image
meta_page.meta.to_h.og:image
meta_page.meta.to_h
meta_page.meta.methods
meta_page.meta.og:image
meta_page.meta
meta_page.meta.image
meta_page.meta.og.image
meta_page.meta.methods
meta_page.meta.image
meta_page.meta.og:image
meta_page.meta
meta_page = MetaInspector.new(rss.entries.first.url)
rss.entries.first.summary
rss.entries.first.description
rss.entries.first.images
rss.entries.first.image
rss.entries.first.author
rss.entries.first
c
rss.entries.first
rss.entries
rss.entries.first.title
rss.entries.first.author
rss.entries.author
rss.entries.first.url
rss.enties.first.url
noko.url
noko
noko.xpath
noko.xpath('./author')
noko.xpath(author)
noko.xpath('author')
noko.xpath('.//title')
noko.xpath('@class="title"/a/text()')
noko.xpath('[@class="title"]/a/text()')
noko.xpath('//@class="title"/a/text()')
noko.xpath('//@class="title"]/a/text()')
noko.xpath('//div[@class="title"]/a/text()')
noko.xpath('//div[contains(@class, "entry")]/p[@class="title"]/a/text()')
noko = Nokogiri::XML(open(rss.entries.first.url))
c
url
q!
c
ruby_article.link
c
current_user.websites.id
current_user.websites.each do |website| p website.id end
current_user.websites.id
params[:website_id]
current_user.websites
c
UserArticle.all
UserArticle
UserArticle.delete(user_articles)
user_articles = @userwebsite.user_articles
user_articles.delete
user_articles.delete!
user_articles = @userwebsite.user_articles
@userwebsite.user_articles.delete_all
@userwebsite.user_articles
@userwebsite = UserWebsite.find_by_user_id_and_website_id(current_user.id, params[:website_id])
c
x
s
@website = Website.find_by_url(url)
c
Website.all
@website = Website.find_by_url(url)
@website = Website.find_by_url(url
c
UserArticle.delete_all
UserArticle.all
ua9 = UserArticle.all
ua9 = UserArticle.find(10)
ua9 = UserArticle.find(9)
w.articles.first.user_articles
w.articles.first
w.articles
uw.user_articles
uw.user_articls
uw = UserWebsite.last
uw.user_articles
w.user_articles
w.articles
w.articls
w.user_articles.all
w.user_articles
w.user_Articles
w = Website.all[-2]
Website.all
w.user_articles.length
w.user_articles
w = Website.last
ua.website
ua = UserArticle.last
@userwebsite.user_articles
@userwebsite = UserWebsite.find_by_user_id_and_website_id(current_user.id, params[:website_id])
c
thumblink.images.first.src
thumblink.images.first
c
thumblink.images.first.src
thumblink.images.first
meta_page.description
Nokogiri::HTML(ruby_article.description).elements.to_s
meta_page.images.first
meta_page.favicon
meta_page.methods
thumblink.meta
thumblink.description
meta_page.description
meta_page.meta.description
meta_page.meta.descriptioon
meta_page.meta.title
meta_page.meta
meta_page.meta.methods
meta_page.meta
meta_page = MetaInspector.new(ruby_article.link)
ruby_page.meta
ruby_article.meta
ruby_article.dc_creator
ruby_article.dc_creatore
ruby_article.pubDate
ruby_article.link
ruby_article
c
ruby_article = rss.items[idx]
rss
page
return {}
c
@article
page
c
return ""
c
q!
c
q!
c
q!

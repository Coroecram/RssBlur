c
rss = RSS::Parser.parse(params[:url])
c
rss = RSS::Parser.parse(params[:url])
c
entry.description
entry.summary
entry.summaryt
entry.descripton
entry = rss.entries.first
rss.description
rss.summary
rss.entries.first.class
rss.entries.first.dc_creator
rss.entries.first.published
rss.entries.first.author
rss.entries.first.title
rss.entries.first
rss.entries
rss.entris
c
rss.class
class RSS
rss.entries = rss.channel.items
rss.entries = rss.channels.items
rss.channel.items
rss.channel
rss.methods
rss.entries
c
RSS::Parser.parse(params[:url])c
RSS::Parser.parse(params[:url])
require 'rss'
RSS::Parser.parse(params[:url])
RSS::Parser.parse(params[:url]
Feedjira::Feed.fetch params[:url]
Website.all
Feedjira::Feed.fetch_and_parse params[:url].force_encoding('ASCII-8BIT')
c
!!URI.parse("http://www.thenation.com/feed/?post_type=article")
c
!!URI.parse(params[:url])
!!URI.parse(uri)
!!URI.parse(url)
uri.kind_of?(URI::HTTP)
uri = URI.parse(url)
"www.#{url}" =~ /\A#{URI::regexp}\z/
url =~ /\A#{URI::regexp}\z/
thenation.com  =~ /\A#{URI::regexp}\z/
URI(url)
url
c
url_validation
c
rss = Feedjira::Feed.fetch_and_parse params[:url].force_encoding('UTF-8')
rss = Feedjira::Feed.fetch_and_parse params[:url].force_encode('UTF-8')
rss = Feedjira::Feed.fetch_and_parse params[:url]
c
rss = Feedjira::Feed.fetch_and_parse URI(params[:url])
rss = Feedjira::Feed.fetch_and_parse open(URI(params[:url]))
rss = Feedjira::Feed.fetch_and_parse open(params[:url])
rss = Feedjira::Feed.fetch_and_parse params[:url]
params[:url]
c
url_validation
c
params[:url] =~ /\A#{URI::DEFAULT_PARSER.regexp[:ABS_URI]}\z/
params[:url] =~ /\A#{URI::DEFAULT_PARSER.regexp[:ABS_URI]}['http', 'https']\z/
params[:url] =~ /\A#{URI::DEFAULT_PARSER.regexp([:ABS_URI]['http', 'https'])}\z/
params[:url] =~ /\A#{URI::DEFAULT_PARSER.regexp[:ABS_URI]['http', 'https']}\z/
URI::DEFAULT_PARSER.regexp[:ABS_URI]
params[:url] =~ /\A#{URI::DEFAULT_PARSER.regexp[:ABS_URI]}\z/
params[:url] =~ /\A#{URI::DEFAULT_PARSER.regexp[:ABS_URI](['http', 'https'])}\z/
params[:url] =~ /\A#{URI::DEFAULT_PARSER.regexp[:ABS_URI]}(['http', 'https'])}\z/
params[:url] =~ /\A#{URI::regexp(['http', 'https'])}\z/
url_validation
params[:url]
c
page.url
feed_uri.methods
feed_uri
c
page.url
q!
c
page.url
c
meta_summary
feedjira_summary
c
thumb_summary
feedjira_summary
meta_summary
c
meta_summary
c
meta_summary
c
thumb_summary
feedjira_summary
meta_summary
c
meta_summary
feedjira_summary
thumb_summary
c
rss.url
rss.entries
meta_feed.feed.entries
meta_feed.feed
meta_feed = MetaInspector.new("www.thenation.com")
meta_feed.content_type
meta_feed.url
meta_feed.feed
meta_feed = MetaInspector.new(params[:url])
rss = Feedjira::Feed.fetch_and_parse params[:url]
c
net
net = Net::HTTP.get(URI.parse(jira_entry.url))
Net::HTTP.get(URI.parse(jira_entry.url))
require 'net'
require 'net/http'
c
jira_entry.url
jira_entry.xpath("author")
thumblink.author
meta_page.meta
meta_page.author
jira_entry.author
c
cc
c
quit
q1
c
params.push(created_date)
params = [url, title, author, summary, image].map { |param| param.force_encoding('UTF-8') }
[url, title, author, summary, image, created_date.to_s].map { |param| param.force_encoding('UTF-8') }
[url, title, author, summary, image, created_date].map { |param| param.force_encoding('UTF-8') }
    end
      param.force_encoding('UTF-8')
[url, title, author, summary, image, created_date].map do |param|
[1,2,3].map(&:+3)
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8')
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8'
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8')
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8')))
[url, title, author, summary, image, created_date].map(&:force_encoding('UTF-8'))
[url, title, author, summary, image, created_date].force_encoding('UTF-8')
[url, title, author, summary, image, created_date]
c
q
c
"Riusuke Fukahori\xE2\x80\x99s".force_encoding('UTF-8')
Base64.decode64("Riusuke Fukahori\xE2\x80\x99s")
Base64.encode64("Riusuke Fukahori\xE2\x80\x99s")
Base64.decode64("Riusuke Fukahori\xE2\x80\x99s")
"Riusuke Fukahori\xE2\x80\x99s"
Riusuke Fukahori\xE2\x80\x99s
c
meta_page.meta.to_h["og:image"]
c
meta_page.meta.to_h["og:description"]
c
rss.entries[0]
idx
c
rss.entries.first
c
thumblink.methods
entry.published
entry.methods
entry = rss.entries.first
meta_page.meta
meta_page.methods
meta_page.author
thumblink.author
thumblink
thumblink.description
thumblink.images.first.src
thumblink.images.first
thumbLink.images
thumbLink.images.first
thumblink = LinkThumbnailer.generate(rss.entries.first.url, image_limit: 1, http_open_timeout: 2, image_stats: false)
thumblink = LinkThumbnailer.generate(entries.first.url, image_limit: 1, http_open_timeout: 2, image_stats: false)
thumb
rss.entries.first.summary
rss.entries.first.description
rss.entries.first.title
rss.entries.first.url
meta_page.meta.to_h["article:published_time"]
meta_page.meta.to_h["og:description"]
meta_page.meta.to_h[og:description]
meta_page.meta.to_h[:og:description]
meta_page.meta.to_h
meta_page.description
meta_page.summary
meta_page.sumamry
meta_page.meta.to_h["og:image"]
meta_page.meta.to_h["og:image
meta_page.meta.to_h.og:image
meta_page.meta.to_h
meta_page.meta.methods
meta_page.meta.og:image
meta_page.meta
meta_page.meta.image
meta_page.meta.og.image
meta_page.meta.methods
meta_page.meta.image
meta_page.meta.og:image
meta_page.meta
meta_page = MetaInspector.new(rss.entries.first.url)
rss.entries.first.summary
rss.entries.first.description
rss.entries.first.images
rss.entries.first.image
rss.entries.first.author
rss.entries.first
c
rss.entries.first
rss.entries
rss.entries.first.title
rss.entries.first.author
rss.entries.author
rss.entries.first.url
rss.enties.first.url
noko.url
noko
noko.xpath
noko.xpath('./author')
noko.xpath(author)
noko.xpath('author')
noko.xpath('.//title')
noko.xpath('@class="title"/a/text()')
noko.xpath('[@class="title"]/a/text()')
noko.xpath('//@class="title"/a/text()')
noko.xpath('//@class="title"]/a/text()')
noko.xpath('//div[@class="title"]/a/text()')
noko.xpath('//div[contains(@class, "entry")]/p[@class="title"]/a/text()')
noko = Nokogiri::XML(open(rss.entries.first.url))
c
url
q!
c
ruby_article.link
c
current_user.websites.id
current_user.websites.each do |website| p website.id end
current_user.websites.id
params[:website_id]
current_user.websites
c
UserArticle.all
UserArticle
UserArticle.delete(user_articles)
user_articles = @userwebsite.user_articles

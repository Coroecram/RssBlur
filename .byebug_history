c
UserArticle.all
UserArticle
UserArticle.delete(user_articles)
user_articles = @userwebsite.user_articles
user_articles.delete
user_articles.delete!
user_articles = @userwebsite.user_articles
@userwebsite.user_articles.delete_all
@userwebsite.user_articles
@userwebsite = UserWebsite.find_by_user_id_and_website_id(current_user.id, params[:website_id])
c
x
s
@website = Website.find_by_url(url)
c
Website.all
@website = Website.find_by_url(url)
@website = Website.find_by_url(url
c
UserArticle.delete_all
UserArticle.all
ua9 = UserArticle.all
ua9 = UserArticle.find(10)
ua9 = UserArticle.find(9)
w.articles.first.user_articles
w.articles.first
w.articles
uw.user_articles
uw.user_articls
uw = UserWebsite.last
uw.user_articles
w.user_articles
w.articles
w.articls
w.user_articles.all
w.user_articles
w.user_Articles
w = Website.all[-2]
Website.all
w.user_articles.length
w.user_articles
w = Website.last
ua.website
ua = UserArticle.last
@userwebsite.user_articles
@userwebsite = UserWebsite.find_by_user_id_and_website_id(current_user.id, params[:website_id])
c
thumblink.images.first.src
thumblink.images.first
c
thumblink.images.first.src
thumblink.images.first
meta_page.description
Nokogiri::HTML(ruby_article.description).elements.to_s
meta_page.images.first
meta_page.favicon
meta_page.methods
thumblink.meta
thumblink.description
meta_page.description
meta_page.meta.description
meta_page.meta.descriptioon
meta_page.meta.title
meta_page.meta
meta_page.meta.methods
meta_page.meta
meta_page = MetaInspector.new(ruby_article.link)
ruby_page.meta
ruby_article.meta
ruby_article.dc_creator
ruby_article.dc_creatore
ruby_article.pubDate
ruby_article.link
ruby_article
c
ruby_article = rss.items[idx]
rss
page
return {}
c
@article
page
c
return ""
c
q!
c
q!
c
q!
c
q!
!@article
!@artcile
c
render json: {}
UserWebsite.find_by_user_id_and_website_id(current_user.id, params[:website_id])
q!
if !@article {return} end
if !@article return end
if !@article return
c
@article
c
UserWebsite.find_by_user_id_and_website_id(current_user.id, params[:website_id]).delete
UserWebsite.find_by_user_id_and_website_id(current_user.id, params[:website_id])
c
uw = UserWebsite.find_by_user_id_and_website_id(1, 2).methods
uw = UserWebsite.find_by_user_id_and_website_id(1, 2)
uw = UserWebsite.find_by_user_id(2).methods
uw = UserWebsite.find_by_user_id(2).all
uw = UserWebsite.find_by_user_id(2).methods
uw = UserWebsite.find_by_user_id(2)
uw = UserWebsite.find_all_by_user_id(1)
uw = UserWebsite.find_by_user_id(1)
uw.methods
uw = UserWebsite.find_by_website_id(params[:id].to_i)
UserWebsite.find_by_website_id(params[:id].to_i).find_by_user_id(1)
UserWebsite.find_by_website_id(params[:id].to_i).where("user_id = 1")
UserWebsite.find_by_website_id(params[:id].to_i)
UserWebsite.find_by_website_id(params[:id].to_i).where("user_id = ?", current_user.id)
current_user
params[:id].to_i
params[:id]
params
c
params
data
c
params
c
@website = Website.find_by_url("hey")
@website = Website.find_by_url(params[:url])
url_validator.errors.full_messages
url_validator.valid?
 url_validator = Website.new(name: 'Test', url: params[:url])
c
url_validation
c
page.feed.methods
page.items
page.feed.items
page.feed
page = MetaInspector.new(params[:url])
page.feed
root_page.images.favicon
root_page = MetaInspector.new(root_url)
root_url = "#{root_uri.scheme}://#{root_uri.host}"
root_url = "#{feed_uri.scheme}://#{feed_uri.host}"
root_uri = URI(params[:url])
params[:url]
params[:ur;]
doc.favicon
doc = Pismo::Document.new(params[:url])
pismo
q!
page.root_url
page.url
page.methods
page.source
page.sourc
params[:url]
page.root_url
page.url
rss.channel.items.first
rss.channel.methods
rss.methods
rss = RSS::Parser.parse(open(params[:url]))
require 'rss'
rss = RSS::Parser.parse(open(params[:url]))
page.methods
page.items
page.itmes
page = MetaInspector.new(params[:url])
c
page.methods
page.feed
page.url
page.root_url
root_page.url
root_page
root_page = MetaInspector.new(page.root_url)
root_url.url
page.root_url
page = MetaInspector.new(params[:url])
feed
c
root_page.images.favicon
root_page.description
root_page.title
root_page = MetaInspector.new(page.root_url)
page = MetaInspector.new(params[:url])
c
root_page.images.favicon
root_page.methods
root_page.title
root_page.description
page.description
root_page.url
root_page = MetaInspector.new(page.root_url)
page = MetaInspector.new(params[:url])
root_page = MetaInspector.new(page.root_url)
c
root_page.description
root_page.title
root_page = MetaInspector.new(page.root_url)
page = MetaInspector.new(params[:url])
root_page = MetaInspector.new(page.root_url)
c
root_page.images.favicon
root_page = MetaInspector.new(page.root_url)
page.root_url.images.favicon
page.root_url
page.methods
page.root
wired.com
page.images.favicon
page.url
page = MetaInspector.new(params[:url])
page.url
c
page.description
page.url
c
http_url = nil
http_url
page.url
page.methods
page.source
page
url
c
page.host
page.methods
page.title
params[:url]
page.description
page.images.favicon
page.methods
page.best_image
poage.best_image
page.meta
page.description
page.fav_icon
page.favicon
page.title
page = MetaInspector.new(params[:url])
feed
page
c
"#{feed_uri.scheme}://#{feed_uri.host}#{feed_uri.path}"
feed_uri = URI(page.feed)
page.feed
feed_uri = URI(metafeed.feed)
metafeed

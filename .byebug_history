c
url
c
name = "#{doc.xpath("//title").children.first.text[0..10]} Feed"
/home/michael/Desktop/appAcademy/RssBlur/app/services/website_parser.rb
doc = Nokogiri::XML(open(root_url))
root_url
        root_url = "#{root_uri.scheme}://#{root_uri.host}"
root_uri = URI(page.url)
page.url
feed
c
page.content_type
page.feed
page
@url
url
c
sorted = @articles.sort_by { |k| k["created_at"] }c
@articles
sorted = @articles.sort_by { |k| k["created_at"] }
@articles
[[1,2,3]].flatten
[1].flatten
[1].to_a
[1]
1.to_a
@articles.first["id"]
c
@articles.each { |article| p article["author"] }
@articles.each { |article| p article["id"] }
@articles.each { |article| puts article["id"] }
@articles.each { |article| puts article.id }
@articles.length
c
@articles.length
c
@articles.length
c
@articles[0].length
@articles.length
@articles.class
ab.methods
ab = ActiveRecord.new
[1,2,3].concat([1,2])
@articles.flatten
@articles
c
@articles.length
c
current_article_created_keys
c
url
c
params
c
params
c
page
c
params
params[:page]
c
current_user.articles
c
exit
current_user.websites
c
user_website.website
user
user_website
root_folder
c
s
cs
c
cc
c
noko_page.css('img').first
noko_page.css('img').forst
noko_page.css('img')
noko_page = Nokogiri::HTML(open(rss_entry.url))
rss_entry.url
noko_page.css('img')
c
noko_page.meta_encoding
noko_page.methods
exit
 "#{root_uri.scheme}://#{root_uri.host}"
root_uri = URI(page.url)
"#{root_uri.scheme}://#{root_uri.host}"
 "#{root_uri.scheme}://#{root_uri.host}"
/home/michael/Desktop/RssBlur/app/controllers/api/websites_controller.rb
URI(page.url)
page.url
page
url
root_uri
root_url
q!
"#{source.url}#{noko_page.css('img').first['src']}"
"#{source.feed_url}#{noko_page.css('img').first['src']}"
noko_page = Nokogiri::HTML(open(rss_entry.url))~~
source.feed_url
source.methods
source.url
q!
page
noko_page.url
noko_page.methods
noko_page.root
noko_page.methods
rss_entry.methods
rss_entry.source
rss_entry.url
noko_page.source
noko_page.link
noko_page.url
noko_page.css('img').first['src'] =~ /\/\w/
noko_page.css('img').first['src'] =~ /\/\d/
noko_page.css('img').first['src'] =~ /\/*/
noko_page.css('img').first['src'] =~ //*/
"http://4.bp.blogspot.com/-pQNHbQ51AlM/VlYKy3drddI/AAAAAAABEj0/L-lgNLK8vtM/s640/dividedwefall.jpg" =~ URI::regexp
noko_page.css('img').first['src'] =~ URI::regexp
noko_page.css('img')[3]
noko_page.css('img')[2]
noko_page.css('img')[1]
noko_page.css('img').first
noko_page.css('img').first['src']
noko_page = Nokogiri::HTML(open(rss_entry.url))
noko_page.css('img')
noko_page.css('img').first['src']
c
feed = (page.content_type === "text/xml" ? true : false)
page.feed
c
"#{doc.xpath("//title").children.first.text[0..10]}"
"#{doc.xpath("//title").children.first.text}"
c
current_user.websites
current_user.websites.includes(:folder_id)
current_user.websites.includes(:user_website)
current_user.websites.includes
current_user.includes(:websites)
current_user.websites
current_user.websites.joins(current_user)
uw = current_user.user_websites.joins(:websites)
uw.joins( :websites )
uw.website
uw.websites
uw = current_user.user_websites
current_user.websites.joins('JOIN current_user.user_websites.folder_id ON website.id')
current_user.user_websites.includes(:websites)
cuw.last.folder_id
cuw.last
cuw = current_user.websites.joins(:user_websites)
current_user.websites.joins(:user_websites)
current_user.websites.joinss(:user_websites)
current_user.websites.includes(:user_websites)
current_user.websites.joins(:user_websites)
current_user.websites.joins(:user_websites ON :user_websites)
current_user.websites.joins(:user_websites.folder_id ON :user_websites.website_id)
current_user.websites.joins(user_websites.folder_id ON user_websites.website_id)
current_user.websites.joins(user_websites.folder_id ON user_websites.website_id')
current_user.websites.joins('INNER JOIN user_websites.folder_id ON user_websites.website_id')
cuw.joins('INNER JOIN current_users ON website_id')
cuw = current_user.websites
current_user.websites.joins('INNER JOIN user_websites.folder_id ON user_websites.website_id')
current_user.websites.joins(:user_websites)
current_user.websites.joins(:user_websites, :folder_id)
current_user.websites.joins('user_websites')
current_user.websites.joins('user_websites.folder_id')
current_user.user_websites.joins(:website)
current_user.user_websites.joins(:websites)
current_user.websites.joins('user_websites.folder_id')
current_user.websites.joins('JOIN user_websites.folder_id')
current_user.websites.joins('JOIN user_websites.folder_id ON user_websites.website_id')
current_user.websites.includes(:user_websites.folder_id)
current_user.websites.includes(:user_websites)
current_user.user_websites.first.folder_id
current_user.user_websites.first.website
current_user.user_websites.first
current_user.websites
current_user.websites.join('SELECT folder_id FROM user_websites')
current_user.websites
current_user.user_websites.folder_id
current_user.user_websites
c
current_articles.where('id = 268').count
current_articles.where('id = 268')
current_articles.where('id = 268
current_articles
c
user_article
c
user_article
c
user_article.methods
c
Article.all.count
c
cc
c
cc
c
Article.all.last
Article.all.count
c
Article.all.count
c
n
current_article_created_keys[created_date.to_i]
UserArticle.where('user_id = ?', current_user.id)
c
uas = UserArticle.where('article_id = 255')
uas = UserArticle.where('user_id = ?', current_user.id)
   19:                         article_id = ?',
UserArticle.where('user_id = ? AND
user_article
c
@unread_count
c
@unread_count
c
@unread_count
c
count
c
@unread.count
@unread
c
unread
UserArticle.where('user_id = ? AND website_id = ? AND read = false', current_user.id, params[:id].to_i)
@unread
c
                              read = false', current_user.id, params[:id].to_i)
                              website_id = ? AND
UserArticle.where('user_id = ? AND
@unread
c
count
c
count
c
count
c
q!
exit
user_articles.first.website
user_articles.where("website.id = ?", params[:id].to_i)
user_articles = UserArticle.where("user_id = ?", current_user.id)
UserArticle.where("user_id = ? AND website = ?", current_user.id, params[:id].to_i)
UserArticle.where("user_id = ? AND website = ?", current_user.id, params[:id])
UserArticle.where("user_id = ? AND website = ?", (current_user.id, params[:id]))
UserArticle.where("user_id = ? AND website = ?", (current_user.id, params[:id']))
UserArticle.where("user_id = ? AND website = ?", [current_user.id, params[:id']])

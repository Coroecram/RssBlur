q!
c
rss.entries.length
c
next_article
c
article
c
urlc
c
url
article
c
next_article
c
image
summary
author
url
title
c
n
Article.find_by_created_date(created_date)
created_date
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
c
next_article
q!
c
current_articles
Article.all
Article.where(url: url)
Article.find_or_create_by(url: url)
c
next_article
c
hey = Article.find_or_create_by(url: url)
hey
title
next_article
c
hey.summary = summary
hey.image = image
hey.created_date = created_date
hey.website_id = params[:website_id]
hey.title = title
hey = Article.find_or_create_by(url: url)
Article.find_or_create_by(url: url)
next_article
c
params[:website_id]
article.created_date = created_date
created_date
c
image
summary
author
title
url
c
                 endc
                    return article if article["url"] == url
current_articles.each do |article|
                 end
                    return article if article["url"] == url
current_articles.each do |article|
@article
c
article["url"]
article.url
article
article[:url]
c
@article
c
@article
c
cash.first.class
cash.class
cash = current_articles.to_a.map(&:serializable_hash)
current_articles.to_a.map(&:serializable_hash)
current_articles.serializable_hash
current_articles.to_a
cajson.url
cajson = current_articles.as_json
current_articles.url
current_articles.as_json
current_articles.ids
current_articles.methods
current_articles
current_articles.select(:id)
current_articles.select(:article_id)
current_articles.select(article_id)
current_articles.select
current_articles.methods
current_articles.to_h
current_articles
q!
c
current_articles.where('url = ?', url).first
current_articles.where
current_articles
c
[].first
@article.first.id
@article.first
@article
@article.methods
@article.id
@article[:id]
@article
c
UserArticle.create!(user_id: current_user.id, article_id: @article.id, read: false, pseudo_read: false) unless user_articles.where('article_id = ?', @article.id)
if user_articles.where('article_id = ?', @article.id) {return true}
if user_articles.where('article_id = ?', @article.id) return true end
if user_articles.where('article_id = ?', @article.id) return true
if user_articles.where('article_id = ?', @article.id)
user_articles.where('article_id = ?', @article.id)
user_articles.includes(@article.id)
user_articles.includes
user_articles
user_articles.artcle_ids
user_articles.artcle_id
user_articles = UserArticle.where('user_id = ?', current_user.id)
 user_article_ids.methods
 user_article_ids.includes(@article.id)
 user_articles_ids.includes(@article.id)
user_article_ids = user_articles.map(&:article_id)
user_articles = UserArticle.where('user_id = ?', current_user.id)
UserArticle.where('user_id = ?', current_user.id)user_articles = UserArticle.where('user_id = ?', current_user.id)
UserArticle.where('user_id = ?', current_user.id).class
UserArticle.where('user_id = ?', current_user.id)
UserArticle.where(
UserArticle.find_all_by_user_id(current_user.id)
user_articles
user_articles.to_a
c
rails c
exit
thumb_link_img_uri
thumb_link_img_uri = URI(thumblink.images.first.src) if thumblink && url_validation(thumblink.images.first.src)
c
meta_page.meta.to_h["og:image"]
meta_image_url
q!
c
sc
s
url_validation(thumblink.images.first.src)
thumb_link_img_uri = URI(thumblink.images.first.src)
thumblink.images.first.src
meta_image_url
c
thumb_link_img_uri
thumb_link_img_url
c
thumb_link_img_url
thumb_link_img_uri
c
thumb_link_img_uri
thumb_link_img_url
c
thumb_link_img_url
thumb_link_img_uri
c
thumb_link_img_url
thumb_link_img_uri
c
thumb_link_img_uri
thumb_link_img_url
c
thumb_link_img_uri
thumb_link_img_url
c
thumb_link_img_url
thumb_link_img_uri
c
thumb_link_img_url
thumb_link_img_uri
c
thumb_link_img_url
thumb_link_img_uri
c
URI.parse(thumb_link_img_url)
URI.parse(thumb_link_image_url)
URI.methods
URI.parse
URI
require 'uri'
thumb_link_img_url
thumblink
meta_image_url
q!
c
meta_page.title
meta_page.description
meta_page
 LinkThumbnailer.generate(rss_entry.url, image_limit: 1, http_open_timeout: 2, image_stats: false)
rss_entry.url
c
cc
c
rss_entry.pubDate
rss_entry.dc_description
rss_entry.methods
c
rss_entry.link
rss_entry.methods
c
RSS::Parser.parse(params[:url], do_validate=false)
RSS::Parser.default_parser(params[:url], do_validate=false)
RSS::Parser.parse.methods
RSS::Parser.parse.arguments
RSS::Parser.parse
RSS::Parser.default_parser(params[:url])
RSS::Parser.default_parses(params[:url])
RSS::Atom(params[:url])
RSS::Atom.methods
RSS::Parser.parse(params[:url])
feed.deep_dup(doc)
feed.clone(doc)
feed.push(doc)

c
params
c
Article.by_website(params[:website_id]).page(params[:page]).per(10)
Article.by_website(params[:website_id]).page(params[:page])
Article.by_website(@website_id).page(params[:page])
c
params
c
current_user.websites.length
current_user.websites
c
Article.where('title LIKE ?', "Field")
Article.first.title
Article.where('title LIKE ?', "the")
Article.where('title LIKE "the"')
@user.articles.where('title LIKE "it"')
@user.articles.where('title LIKE "it's"')
@user.articles
@user.articles.where('title LIKE "the"')
@query
c
@user.articles
user.articles
c
Article.find_by_title(@query)
@query
c
@search_results.first.id
@search_results.first
c
@search_results.map!(&:searchable).first
@search_results.map(&:searchable).first
@search_results.map(&:searchable)
@search_results.first
@search_results
c
@search_results.length
@search_results/length
@search_results
c
@search_results.length
c
@search_results
c
@search_results
c
@search_results
c
params
c
@user.avatar.url
c
@user.avatar.path
@user.avatar.methods
@user.avatar.url.methods
@user.avatar.url
@user.avatar.bucket_name
@user.avatar.methods.bucket_name
@user.avatar.methods.bucket_ame
@user.avatar.methods
c
@user
c
@user
c
JSON.parse(@user.to_json)
JSON.parse(@user)
@user.to_json.id
@user.,to_json.id
@user.class
@user
c
@user
c
@user.to_json!
@user
@user.to_json
@user.id
@user
c
@user
c
@user
c
merger
c
current_user.methods
c
@user.as_json.merge({thumb: @user.avatar(:thumb)})
@user.as_json.merge({thumb: @user.avatar(:thumb))
@user.merge(@user.avatar(:thumb))
@user.avatar(:thumb)
@user.avatar.url(:thumb)
@user.avatar.url.thumb
@user.avatar.url
@user
@user.to_json
@user.display
c
@user.display
c
@user.avatar(:display)
c
current_user.avatar(:small)
current_user.avatar.small
c
user_params
c
user_params
params
c
params
user_params
c
user_params
params
c
dates == sort_dates
sort_dates.sort
dates == sort_dates
dates.sort
dates
dayes
dates == sort_dates
sort_dates
@articles.each { |article| sort_dates <<  article["created_at"].to_i }
@articles.sort_by! { |article| article[:created_at].to_i }
sort_dates = []
@articles.each { |article| dates <<  article["created_at"].to_i }
@articles.each { |article| dates <<  article["created_at"].to_i; nil }
@articles.each { |article| dates <<  article["created_at"].to_i }
dates.sort
dates
@articles.each { |article| dates <<  article["created_at"].to_i }
dates = []
c
@articles = current_user.articles
current_user.articles
Current_User.articls
c
current_user
@articles.each { |article| puts article[:created_at].to_i }
@articles.each { |article| puts article["created_at"].to_i }
@articles.sort_by! { |article| article[:created_at].to_i }
@articles.each { |article| puts article["created_at"].to_i }
@articles.sort_by { |article| article["created_at"].to_i }
@articles.each { |article| puts article["created_at"].to_i }
@articles.order
@articles.each { |article| puts article["created_at"] }
@articles.sort_by { |article| article["created_at"].to_i }
@articles.each { |article| puts article["created_at"] }
@articles.sort_by { |article| article["created_at"] }
@articles.each { |article| puts article["created_at"] }
@articles
c
@articles
c
@articles
@articles.each { |article| puts article["created_at"] }
c
sorted.each { |article| puts article["created_at"] }
sorted
sorted = @articles.sort_by { |article|  article["created_at"] }
@articles.each { |article| puts article["created_at"] }
@articles
c
@articles
c
sign_out!
c
rss.entries[6].published
rss.entries[7].published
rss.entries[7]
rss.entries[6]
idx
next_article["id"]
c
next_article["id"]
c
next_article["id"]
c
next_article["id"]
c
next_article["id"]
c
next_article["id"]
c
next_article["id"]
c
next_article["id"]
c
user_article_keys
c
User.last
@user_id
@user
UserArticle.user_articles(@user_id, articles_ids)
c
UserArticle.user_articles(@user_id, articles_ids)
c
user_article_keys
c
user_article_keys
c
User.last
@user_id
c
user_article_keys
c
user_article_keys
c
user_article_keys
c
user_article_keys
q!
c
user_article_keys
c
user_article_keys
new_article_id
c
next_article["id"]
c
user_article_keys
c
next_article["id"]
next_article
next_artile
new_article_id
c
user_article_keys
c
new_article_id
c
user_article_keys
c
new_article_id
c
user_article_keys
c
user_article_keys
c
render json: current_user.errors.full_messages.to_sentence
current_user.errors.full_messages.to_sentence
c
current_user.errors.full_messages
current_user.errors
@user.errors
@user
@use
c
sc
s
c
User.valid({password: params['password'], password_confirmation: params['password_confirmation']})

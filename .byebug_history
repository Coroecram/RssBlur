q!
cc
c
html_doc.elements.to_h
html_doc.elements.methods
html_doc.elements.to_s
html_doc.elements.elements
html_doc.elements
html_doc.text?
html_doc.last_child
html_doc.type
html_doc.last_element_child.children.children.type
html_doc.last_element_child.children.children
html_doc.last_element_child.children
html_doc.last_element_child
html_doc.element_nodes
html_doc.text_nodes
html_doc.attribute_nodes
html_doc.nodes
html_doc
html_doc.node_type
html_doc.methods
html_doc.detect_encoding
html_doc.class
html_doc.xpath('TEXT_NODE')
html_doc.xpath('TEXTNODE')
html_doc.css('img')
html_doc.xpath('name')
html_doc.xpath('name'')
html_doc.xpath
html_doc.xpath('src')
html_doc.at_xpath('src')
html_doc.at_xpath('@rc')
html_doc.at_xpath('@src')
html_doc.at_xpath('@src'))
html_doc.at_xpath(TEXT)
html_doc.at_xpath("text")
html_doc.at_xpath
html_doc
html_doc = Nokogiri::HTML(ruby_article.description)
html_doc.css('img')
html_doc = Nokogiri::HTML(html.read)
html_doc = = Nokogiri::HTML(html.read)
html
html = open(ruby_article.link)
ruby_article.link.read
ruby_article.link
ruby_article
ruby_Article
c
ruby_article.link
article.url
c
e
e.message
e.methods
e
c
parsed = LinkThumbnailer.generate(ruby_article, image_limit: 1, http_open_timeout: 2, image_stats: false)
parsed = URI.parse(encoded_url)
encoded_url
encoded_url = URI.encode(params[:url])
article = LinkThumbnailer.generate(ruby_article, image_limit: 1, http_open_timeout: 2, image_stats: false)
ruby_article.title
ruby_article
c
rss
c
thumblink.created
thumblink.author
thumblink.methods
thumblink.title
thumblink.description
rubyitem.description
thumblink.description
thumblink.description'
thumblink
rubyitem.link
rubyitem = rss.items.first
simpleitem.link
simpleitem.entries
simpleitem.methods
simpleitem.source
simpleitem.url
simpleitem.description
simplerss.methods
simplerss.description
rss.items.first.description
rss.items.description
rss.items.first
rss
simpleitem = simplerss.items[1]
simpleitem = simplerss.items.first
simplerss.link
thumblink.url
thumblink.url.read
thumblink.url
thumblink.url.path
thumblink.url.open
thumblink.url.methods.open
thumblink.url.methods
thumblink.url
thumblink
simplerss.items[1]
simplerss.items.first
simplerss.items
simplerss.methods
rss.items.first
rss.first
rss
simplerss.feed.entries.first
simplerss.entries.first
simplerss.entries.first.methods
simplerss.entries.first.description
simplerss.entries.first
simplerss.entries
simplerss.feed.methods
simplerss.feed
simplerss.feed.first
simplerss.methods
simplerss
simplerss.channel
simplerss.channel.first
simplerss.methods
simplerss.feed.url
simplerss.feed
simplerss.methods
simplerss.description
simplerss = SimpleRSS.parse(open(params[:url]))
simplerss = SimpleRSS.parse(open(params[:url])
thumblink.description
rss.items.first.description
thumblink.methods
thumblink.description
thumblink.title
thumblink = LinkThumbnailer.generate(rss.items.first.link, image_limit: 1, http_open_timeout: 2, image_stats: false)
thumblink.url
thumblink.link
thumblink.images.first.src
thumblink.images.first
thumblink.description
thumblink.image
thumblink = LinkThumbnailer.generate(rss.items.first.link, image_limit: 2, http_open_timeout: 2, image_stats: false)
thumblink = LinkThumbnailer.generate(rss.items.first.link, image_limit: 2, http_open_timeout: 2)
thumblink = LinkThumbnailer.generate(rss.items.first.link, image_limit: 5, http_open_timeout: 5)
thumblink = LinkThumbnailer.generate(rss.items.first.link, image_limit: 5)
thumblink = LinkThumbnailer.generate(rss.items.first.link, image_limit = 5)
thumblink.favicon
rss.items.first
rss.items.first.description
rss.items.first
thumblink.description
thumblink = LinkThumbnailer.generate(rss.items.first.link)
c
thumblink.images.first
thumblink.images
thumblink = LinkThumbnailer.generate(rss.items.first.link)
thumblink
thumblink = LinkThumbnailer.generate(params[:url])
c
x
rss.items.first.methods
simplerss.entries.first.methods
simplerss.entries.first.fav_icon
simplerss.entries.first.favicon
simplerss.entries.first.pretty_inspect
simplerss = SimpleRSS.parse(open(params[:url]))
c
simplerss.entries.first.title
simplerss.entries.first.pretty_inspect
simplerss.entries.first.methods
simplerss.entries.first
simplerss.entries
simplerss.methods
simplerss = SimpleRSS.parse(open(params[:url]))
rss.items.first.dc_description
rss.items.first.guid
rss.items.first.methods
rss.items.first.description
c
rss.items.first.description
rss.items.first.summary
c
rss.items.first.summary
rss.items.first.description
c
rss.items.first.description
c
rss.items.first.description
c
rss.items.first.description
rss
c
rss0.items.first.description
rss0 = RSS::Parser.parse(open(params[:url]))
rss.entries.first.description
rss.entries.first.description.img
rss.entries.first.author
rss.entries.first
rss.entries.class
rss.entries
rss.methods
SimpleRSS.methods
rss.methods
rss.feed_tags
rss
SimpleRSS.feed_tags
SimpleRSS.feed_tags << :title
SimpleRSS.feed_tags[title]
SimpleRSS.feed_tags[:title]
SimpleRSS.feed_tags.title
SimpleRSS.feed_tags
rss.feed_tags
rss
SimpleRSS.feed_tags
SimpleRSS.feed_tags(open(params[:url]))
SimpleRSS.feed_tags rss
SimpleRSS.methods
SimpleRss.methods
.item_tags << :"media:content#url
rss.item_tags
rss.feed.item_tags
rss.feed.articles
rss.feed
rss.channel.each do |article|  puts article.title  end
rss.channel.each do |article| { puts article.title } end
rss.channel.description
rss.channel.title
rss.channel
rss.channel.first
rss.channel
rss.items.first.methods
rss.items
rss.itmes
rss.pubDate.to_datetime
rss.pubDate.to_date
rss.pubDate.to_time
rss.pubDate
rss.methods
rss.author
rss.title
rss.description
rss
q!
article.description.methods
article.description.as_json
article.description.ad_json
article.description.each
article.description.each_with_index
article.description.first
article.description.methods
article.description
meta.images.best
meta.image
meta.img
meta = MetaInspector.new(article.link)

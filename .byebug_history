c
feed_url = "#{feed_uri.host}#{feed_uri.path}"
feed_url = "#{feed_uri.host feed_uri.path}"
feed_uri.path
feed_uri.host
feed_uri.methods
feed_uri.source
feed_uri.query
feed_uri = feed_uri - feed_uri.query
feed_uri = URI(test_feed)
test_feed = test.feed
test.feed
tes
feed
test_uri = URI(test)
test =~ ^[^?]+
test.feed.methods
test.feed
test = MetaInspector.new(params[:url])
url_validation
params
c
feed
url_validation
c
s
ss
s
page
s
c
n
s
c
q!
c
q
c
params
c
params
c
params
c
params[:url]
c
feed
feed = (page.content_type === "text/xml" ? true : false)
page.content_type
page
c
url_validation.valid?
c
s
params[:url]
params[:url
url_validation.valid?
c
q!
test.errors.full_messages
test.errors.messages
test.valid?
test.errors
test.save
test.valid?
test = Website.new(name: 'test', url: params[:url])
test.name = test
test.errors
test.save
test.errors
test.save
test.valid?.methods
test.valid?.errors
test.errors
test.valid?
test = Website.new(name: test, url: params[:url])
Website.valid?
.is_valid?
q!
URI.parse('dgsg')
URI.parse('www.google.com')
URI.parse('www.google.com') =~ URI::DEFAULT_PARSER.regexp[:ABS_URI]
URI.parse('
'www.google.com' =~ URI::DEFAULT_PARSER.regexp[:ABS_URI]
'www.google.com
params[:url] =~ URI::DEFAULT_PARSER.regexp[:ABS_URI]
URI::DEFAULT_PARSER.regexp[:ABS_URI]
'www.google.com' =~ /\A#{URI::regexp}\z/
www.google.com =~ /\A#{URI::regexp}\z/
/\A#{URI::regexp}\z/
'www.espn.com' =~ /\A#{URI::regexp}\z/
'www.espn.com' =~ URI::regexp
'espn.com' =~ URI::regexp
URI::regexp
params[:url] =~ URI::regexp
params[:url]
c
page
feed.url
feed
c
current_user.websites
current_user
c
root_page.meta
root_page.stylesheets
root_page.style_sheets
root_page.methods
root_page.favicon
root_page = MetaInspector.new(page.root_url)
page.root_url.favicon
page.root_url
page.source
page.methods
page
page.images
page.favicon
page.methods
page.favicon()
page.favicon
page.fav_icon
page.favicon
page.methods
page.description
page.title
page
feed
feed.url
c
feed
c
page.feed
c
feed
c
1 === 1
1 == 1
page.content_type
feeded.content_type
feeded.methods
feeded.is_feed
feeded.feed
feeded = MetaInspector.new('http://www.engadget.com/rss.xml')
page.source
page.feed
page
page.html
c
page.methods
page.feed
page
c
params
c
params
c
params
c
x
c
user_params
c
feed
c
page
c
MetaInspector.new(params[:url])
params[:url]
c
MetaInspector.reachable?
MetaInspector.methods
c
s
ss
s
ss
s
c
paramsc
c
params
c
@user.errors.full_messages.to_sentence.to_s
json: @user.errors.full_messages.to_sentence
render json: @user.errors.full_messages.to_sentence
render json: @user.errors.full_messages.to_sentence.to_s
render json: @user.errors.full_messages.to_sentence
@user.errors.full_messages.to_sentence
@user.errors.full_messages
@user.errors
response
error
c
user_params
params
c
Nokogiri::HTML(ruby_article.description).elements.to_s
Nokogiri::HTML(ruby_article.description).elements
Nokogiri::HTML(ruby_article.description).elments
Nokogiri::HTML(ruby_article.description)
ruby_article.description
c
@user
c
EmailValidator.valid?(params[:handle])
params
c
user_params
params
c
v
@article.detail = html_doc.elements.to_s
html_doc.elements.to_s
html_doc.css('img')
html_doc = Nokogiri::HTML(ruby_article.description)
@article
c
article.description
article.description = ""
q!
cc
c
html_doc.elements.to_h
html_doc.elements.methods
html_doc.elements.to_s
html_doc.elements.elements
html_doc.elements
html_doc.text?
html_doc.last_child
html_doc.type
html_doc.last_element_child.children.children.type
html_doc.last_element_child.children.children
html_doc.last_element_child.children
html_doc.last_element_child
html_doc.element_nodes
html_doc.text_nodes
html_doc.attribute_nodes
html_doc.nodes
html_doc
html_doc.node_type
html_doc.methods
html_doc.detect_encoding
html_doc.class
html_doc.xpath('TEXT_NODE')
html_doc.xpath('TEXTNODE')
html_doc.css('img')
html_doc.xpath('name')
html_doc.xpath('name'')
html_doc.xpath
html_doc.xpath('src')
html_doc.at_xpath('src')
html_doc.at_xpath('@rc')
html_doc.at_xpath('@src')
html_doc.at_xpath('@src'))
html_doc.at_xpath(TEXT)
html_doc.at_xpath("text")

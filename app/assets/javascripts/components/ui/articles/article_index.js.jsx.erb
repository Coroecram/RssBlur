var isScrolling = false;

var ArticleIndex = React.createClass({
  mixins: [ReactRouter.History],

  getInitialState: function () {
    return {source: '<%= image_path('loading.gif') %>',
            sidebar: SidebarClickedStore.fetch(),
            page: 1,
            per: 0,
            articles: null,
            unreadArticleIds: null};
  },

  componentDidMount: function () {
    this.fetchUnreads();
    SidebarClickedStore.addChangeListener(this.onSidebarChange);
    ArticleStore.addChangeListener(this.onArticleChange);
    if (typeof this.state.sidebar === 'undefined') {
      this.props.params.id ?
            WebsiteApiUtil.fetchClickedWebsite(this.props.params.id,
                                               null,
                                               this.notAWebsite) :
            WebsiteApiActions.setSidebarClicked("all");
    } else {
      this.onSidebarChange();
    }
  },

  componentWillUnmount: function () {
    SidebarClickedStore.removeChangeListener(this.onSidebarChange);
    ArticleStore.removeChangeListener(this.onArticleChange);
  },

  componentWillReceiveProps: function () {
    debugger
    WebsiteApiActions.setSidebarClicked("all");
  },

  fetchUnreads: function () {
    ArticleApiUtil.fetchUnread(this.props.params.id, this.setUnreads);
  },

  setUnreads: function (data) {
    unreads = {};
    for (var i = 0; i < data.length; i++) {
      articleId = data[i].article_id;
      unreads[articleId] = true;
    }
    this.setState({unreadArticleIds: unreads})
  },

  onSidebarChange: function () {
    var clickedItem = SidebarClickedStore.fetch();
    ArticleApiActions.resetArticles();
     clickedItem === "all" ?
      ArticleApiUtil.fetchAllArticles(1) :
      ArticleApiUtil.fetchArticles(clickedItem, 1)
    this.setState({sidebar: clickedItem,
                   articles: null,
                   page: 1});
  },

  onArticleChange: function () {
    this.state.sidebar === "all" ?
      ArticleApiUtil.fetchAllUnread(this.setUnreads) :
      ArticleApiUtil.fetchUnread(this.props.params.id, this.setUnreads)
    this.setState({articles: ArticleStore.all()});
  },

  notAWebsite: function () {
    this.history.pushState(null, '/all_feeds');
  },

  incrementPage: function () {
    var page = this.state.page;
    var per = this.state.per;
    if (page === 1) {
      per = this.state.articles.length;
      this.setState({per: per})
    }
    this.state.sidebar === "all" ?
      ArticleApiUtil.fetchAllArticles(page + 1) :
      ArticleApiUtil.fetchArticles(this.state.sidebar, page + 1, per)
    this.setState({page: page += 1});
  },

  autoScroll: function (toScroll, idx) {
    isScrolling = true;
    toScroll.scrollTo(toScroll.children()[idx],
                      {duration: 250},
                      function() {TimerMixin.setTimeout(function () {this.clearScrolling()}.bind(this), 300)}.bind(this));
  },

  clearScrolling: function () {
    isScrolling = false;
  },

  _listClick: function (e) {
    var articleListUL = $('.article-list');
    var articleDetailUL = $('.detail-article-list');
    idx = parseInt(e.currentTarget.dataset.index);
    articleId = parseInt(e.currentTarget.dataset.articleId);
    this.autoScroll(articleListUL, idx);
    this.autoScroll(articleDetailUL, idx);
    if (e.currentTarget.dataset.unread) {
      ArticleApiUtil.markRead(articleId);
    }
  },

  render: function () {
    if (!this.state.articles) {
      return <Spinner source={this.state.source}/>
    } else {
      var nextPage
      if (this.state.sidebar != "all" && this.state.articles.length != 0) {
          nextPage = <li className="next-page" onClick={this.incrementPage}>
                        Load More Articles
                     </li>
      } else if (this.state.sidebar === "all" && this.state.articles.length != 0) {
          nextPage = undefined;
      } else {
            nextPage = <li className="no-articles">No Articles</li>
      }

        return (
              <div className="article-index group">
                <ul className="article-list">
                    {this.state.articles &&
                      this.state.articles.map(function (article, idx) {
                        if (this.state.unreadArticleIds) {
                          var readVal = this.state.unreadArticleIds[parseInt(article.id)]
                        }
                                return <ArticleListItem key={"listed"+article.id}
                                                        page={this.state.page}
                                                        incrementPage={this.incrementPage}
                                                        article-id={article.id}
                                                        index={idx}
                                                        unread={readVal}
                                                        clickHandler={this._listClick}
                                                        article={article} />
                               }.bind(this))
                    }
                    {nextPage}
                </ul>
                <ul className="detail-article-list">
                {this.state.articles &&
                  this.state.articles.map(function (article, idx) {
                            return <ArticleDetail key={"deets"+article.id}
                                                  page={this.state.page}
                                                  incrementPage={this.incrementPage}
                                                  articleId={article.id}
                                                  index={idx}
                                                  article={article}/>
                           }.bind(this))
                }
                           {nextPage}
                </ul>
              </div>
            );
      }
  }
});
